// Demonstrates basic web serial input with p5js. See:
// https://makeabilitylab.github.io/physcomp/communication/p5js-serial
// 
// By Jon E. Froehlich
// @jonfroehlich
// http://makeabilitylab.io/
//

let shapeFraction = 0; // tracks the new shape fraction off serial
let serial; // the Serial object
let serialOptions = { baudRate: 115200  };

function preload(){
    flower1 = loadImage("https://media.giphy.com/media/v1.Y2lkPTc5MGI3NjExazE5dXZlN3lqM3JhNHF2ZzFrOG1zYWI3ODB4aHBhNDZmbjF5eXh1ZiZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9cw/3ohhwNqyraVimPM4Ba/giphy.gif", "flower");
		flower2 = loadImage("https://media.giphy.com/media/v1.Y2lkPTc5MGI3NjExdHk5bW5jZjRqOXcyMXh6ZGozdGd1ZGlxdngyOWdpanRuM3F3OHdsciZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9cw/3ohhwGUroCf7Ka7bc4/giphy.gif");
		gif = flower1;
}

function setup() {
  createCanvas(800, 600);

  // Setup Web Serial using serial.js
  serial = new Serial();
  serial.on(SerialEvents.CONNECTION_OPENED, onSerialConnectionOpened);
  serial.on(SerialEvents.CONNECTION_CLOSED, onSerialConnectionClosed);
  serial.on(SerialEvents.DATA_RECEIVED, onSerialDataReceived);
  serial.on(SerialEvents.ERROR_OCCURRED, onSerialErrorOccurred);

  // If we have previously approved ports, attempt to connect with them
  serial.autoConnectAndOpenPreviouslyApprovedPort(serialOptions);

  // Add in a lil <p> element to provide messages. This is optional
  pHtmlMsg = createP("Click anywhere on this page to open the serial connection dialog");
}

function draw() {
  background(0);
  
// 	imageMode(CENTER);
// 	img = createImg('https://media.giphy.com/media/v1.Y2lkPTc5MGI3NjExazE5dXZlN3lqM3JhNHF2ZzFrOG1zYWI3ODB4aHBhNDZmbjF5eXh1ZiZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9cw/3ohhwNqyraVimPM4Ba/giphy.gif', 'image'); // Replace 'your_image_url.jpg' with your actual image URL
//   gif_createImg = createImg("https://media.giphy.com/media/v1.Y2lkPTc5MGI3NjExazE5dXZlN3lqM3JhNHF2ZzFrOG1zYWI3ODB4aHBhNDZmbjF5eXh1ZiZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9cw/3ohhwNqyraVimPM4Ba/giphy.gif", "flower");
// 	//img.hide(); // Hide the original image element
// }
  noStroke(); // turn off outline
  fill(255,200,200); // white circle Random255?

  // Get x,y center of drawing Canvas
  let xCenter = width / 2;
  let yCenter = height / 2;

  // Set the diameter based on mouse x position
  const maxDiameter = min(width, height);
  // let shapeFraction = mouseX / width;
  let circleDiameter = maxDiameter * shapeFraction;
  //circle(xCenter, yCenter, circleDiameter);
	
	
	// image( image name, X(left or right), Y(up or down), size (width), size (height))
	image(gif, (width / 2-(circleDiameter*0.25)), 50, circleDiameter*0.5, circleDiameter*0.5);// top flower
	image(gif, (width / 2-(circleDiameter*0.25)), 380, circleDiameter*0.5, circleDiameter*0.5); //bottom flower
	image(gif, 190, height/2 - (circleDiameter*0.25), circleDiameter*0.5, circleDiameter*0.5); //left flower
	image(gif, 420,  height/2 - (circleDiameter*0.25), circleDiameter*0.5, circleDiameter*0.5);//right flower
	
	
	
	
}


function onSerialErrorOccurred(eventSender, error) {
  console.log("onSerialErrorOccurred", error);
}

function onSerialConnectionOpened(eventSender) {
  console.log("onSerialConnectionOpened");
}

function onSerialConnectionClosed(eventSender) {
  console.log("onSerialConnectionClosed");
}

//this function gets new numbers
function onSerialDataReceived(eventSender, newData) {
  console.log("onSerialDataReceived", newData);
  pHtmlMsg.html("onSerialDataReceived: " + newData);

	// this number changes !!
  shapeFraction = parseFloat(newData);
	if (parseFloat(newData) < 0.5){
		gif = flower2;
	}
	else{
		gif = flower1;
	}
}

function mouseClicked() {
  if (!serial.isOpen()) {
    serial.connectAndOpen(null, serialOptions);
  }
}
